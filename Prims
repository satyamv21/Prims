#include <iostream>
#include <vector>
#include <climits>
using namespace std;

#define V 6

int minKey(int key[], bool mstSet[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++)
        if (!mstSet[v] && key[v] < min)
            min = key[v], min_index = v;
    return min_index;
}

void printMST(int parent[], int graph[V][V], vector<string> nodes) {
    cout << "Edge \t\tWeight\n";
    for (int i = 1; i < V; i++)
        cout << nodes[parent[i]] << " - " << nodes[i] << "\t" << graph[i][parent[i]] << "\n";
}

void primMST(int graph[V][V], vector<string> nodes) {
    int parent[V];
    int key[V];
    bool mstSet[V];

    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet);
        mstSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent, graph, nodes);
}

int main() {
    vector<string> nodes = {"CS", "ME", "EE", "Library", "Admin", "Hostel"};

    int graph[V][V] = {
        {0, 4, 0, 0, 6, 0},
        {4, 0, 5, 0, 0, 7},
        {0, 5, 0, 3, 0, 8},
        {0, 0, 3, 0, 2, 0},
        {6, 0, 0, 2, 0, 9},
        {0, 7, 8, 0, 9, 0}
    };

    primMST(graph, nodes);

    return 0;
}
